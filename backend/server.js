'use strict';

const express = require('express');
const axios = require('axios');
const app = express();
const sql = require('mssql');
const path = require('path');
const cors = require('cors');

// Import c·∫•u h√¨nh IP t·ª´ file config-network.json
const ip = require('../config-network.json'); // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ch√≠nh x√°c

// C·∫•u h√¨nh SQL Server
const config = {
    user: 'sa',
    password: 'nckhabc123!',
    server: ip.host, // S·ª≠ d·ª•ng IP t·ª´ file config
    database: 'nckhdb',
    port: 1433,
    options: {
        encrypt: false, // ƒê·ªÉ cho m√¥i tr∆∞·ªùng ph√°t tri·ªÉn (c√≥ th·ªÉ c·∫ßn true cho production)
        trustServerCertificate: true // Tin t∆∞·ªüng ch·ª©ng ch·ªâ m√°y ch·ªß
    }
};

// K·∫øt n·ªëi ƒë·∫øn SQL Server pool
const conn = new sql.ConnectionPool(config).connect().then(pool => {
    console.log('‚úÖ Connected to SQL Server');
    return pool;
}).catch(err => {
    console.error('‚ùå Failed to connect to SQL Server:', err);
    process.exit(1); // Tho√°t ·ª©ng d·ª•ng n·∫øu kh√¥ng th·ªÉ k·∫øt n·ªëi DB
});

const PORT = 3001; // C·ªïng cho backend server
app.use(cors({ origin: `http://${ip.host}:${ip.frontend}` })); // Cho ph√©p CORS t·ª´ frontend

// C·∫•u h√¨nh Fablo REST API URL
const FABLO_REST_URL = `http://${ip.host}:${ip.fablo}`;
let AUTH_TOKEN = ""; // Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u token admin

app.use(express.json()); // Middleware ƒë·ªÉ ph√¢n t√≠ch c√∫ ph√°p JSON trong request body

console.log(`
    ‚úÖ Frontend running at http://${ip.host}:${ip.frontend}
    ‚úÖ Backend running at http://${ip.host}:${ip.backend} (Port: ${PORT})
    ‚úÖ Fablo REST API at http://${ip.host}:${ip.fablo}
`);

// --- C√°c h√†m h·ªó tr·ª£ ---
/**
 * C·∫≠p nh·∫≠t AUTH_TOKEN b·∫±ng c√°ch g·ªçi Fablo REST /user/enroll.
 * Token n√†y th∆∞·ªùng l√† token c·ªßa admin ƒë·ªÉ th·ª±c hi·ªán c√°c truy v·∫•n chung.
 */
async function updateAuthToken() {
    try {
        const result = await axios.post(`${FABLO_REST_URL}/user/enroll`, {
            id: "admin",
            secret: "adminpw"
        }, {
            headers: { "Content-Type": "application/json" }
        });
        AUTH_TOKEN = result.data.token;
        console.log("üîë Token admin ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.");
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y token admin:", error.message);
    }
}

// G·ªçi ngay khi server kh·ªüi ƒë·ªông ƒë·ªÉ c√≥ token ban ƒë·∫ßu
updateAuthToken();
// L·∫∑p l·∫°i m·ªói 10 ph√∫t ƒë·ªÉ ƒë·∫£m b·∫£o token lu√¥n h·ª£p l·ªá
setInterval(updateAuthToken, 10 * 60 * 1000);

// --- C√°c API Fablo REST (T∆∞∆°ng t√°c v·ªõi Smart Contract) ---

/**
 * API l·∫•y token cho ng∆∞·ªùi d√πng c·ª• th·ªÉ (admin/manufacturer/pharmacy/storagea/storageb).
 * @route POST /api/get-user-token
 * @body {string} id - ID ng∆∞·ªùi d√πng (v√≠ d·ª•: "admin", "manufacturer.admin", "pharmacy.user")
 * @body {string} secret - M·∫≠t kh·∫©u ng∆∞·ªùi d√πng (v√≠ d·ª•: "adminpw", "manufacturer.adminpw", "pharmacy.userpw")
 */
app.post('/api/get-user-token', async (req, res) => {
    const { id, secret } = req.body;
    if (!id || !secret) {
        return res.status(400).json({ error: "Missing user ID or secret for token enrollment" });
    }
    try {
        const result = await axios.post(`${FABLO_REST_URL}/user/enroll`, {
            id: id,
            secret: secret
        }, {
            headers: { "Content-Type": "application/json" }
        });
        console.log(`üîë ƒê√£ l·∫•y token cho ng∆∞·ªùi d√πng: ${id}`);
        res.json({ token: result.data.token });
    } catch (err) {
        console.error("‚ùå L·ªói khi l·∫•y token cho ng∆∞·ªùi d√πng:", err.response ? err.response.data : err.message);
        res.status(err.response ? err.response.status : 500).json({ 
            error: "Failed to get user token", 
            details: err.response ? err.response.data : err.message 
        });
    }
});

/**
 * API t·∫°o m·ªôt l√¥ thu·ªëc m·ªõi tr√™n s·ªï c√°i.
 * @route POST /api/createMedicine
 * @body {string} medicineId - ID c·ªßa thu·ªëc.
 * @body {string} batchId - ID l√¥ c·ªßa thu·ªëc.
 * @body {string} manufacturerId - ID c·ªßa nh√† s·∫£n xu·∫•t.
 * @body {string} productionDate - Ng√†y s·∫£n xu·∫•t (YYYY-MM-DD).
 * @body {string} expiryDate - Ng√†y h·∫øt h·∫°n (YYYY-MM-DD).
 * @body {number} quantity - T·ªïng s·ªë l∆∞·ª£ng ƒë∆∞·ª£c s·∫£n xu·∫•t trong l√¥ n√†y.
 * @body {string} token - Token x√°c th·ª±c c·ªßa ManufacturerMSP.
 */
app.post('/api/createMedicine', async (req, res) => {
    const { medicineId, batchId, manufacturerId, productionDate, expiryDate, quantity, token } = req.body;
    if (!medicineId || !batchId || !manufacturerId || !quantity || !productionDate || !expiryDate) {
        return res.status(400).json({ error: "Thi·∫øu c√°c tr∆∞·ªùng b·∫Øt bu·ªôc ƒë·ªÉ t·∫°o thu·ªëc." });
    }
    if (!token) {
        return res.status(401).json({ error: "Thi·∫øu token x√°c th·ª±c. Y√™u c·∫ßu token c·ªßa ManufacturerMSP." });
    }

    console.log("ƒêang g·ª≠i y√™u c·∫ßu createMedicine...");
    try {
        const response = await axios.post(
            `${FABLO_REST_URL}/invoke/channel/transfer`, // S·ª≠ d·ª•ng c·ªïng c·ªßa Manufacturer MSP (8801) cho Fablo REST
            {
                method: "SupplyChainContract:createMedicine",
                args: [
                    medicineId,
                    batchId,
                    manufacturerId,
                    productionDate,
                    expiryDate,
                    quantity.toString() // ƒê·∫£m b·∫£o s·ªë l∆∞·ª£ng l√† chu·ªói
                ]
            },
            {
                headers: {
                    "Authorization": `Bearer ${token}`, // S·ª≠ d·ª•ng token t·ª´ request body
                    "Content-Type": "application/json"
                }
            }
        );
        res.json(response.data);
        console.log("‚úÖ Thu·ªëc ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng:", response.data);
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫°o thu·ªëc:", error.response ? error.response.data : error.message);
        res.status(error.response ? error.response.status : 500).json({ 
            error: "Kh√¥ng th·ªÉ t·∫°o thu·ªëc tr√™n s·ªï c√°i.", 
            details: error.response ? error.response.data : error.message 
        });
    }
});

/**
 * API chuy·ªÉn s·ªë l∆∞·ª£ng thu·ªëc gi·ªØa c√°c th·ª±c th·ªÉ (Manufacturer, StorageA, StorageB).
 * @route POST /api/transferMedicine
 * @body {string} parentLogId - ID log c·ªßa b·∫£n ghi thu·ªëc cha.
 * @body {string} fromId - ID c·ªßa th·ª±c th·ªÉ chuy·ªÉn thu·ªëc.
 * @body {string} toId - ID c·ªßa th·ª±c th·ªÉ nh·∫≠n thu·ªëc.
 * @body {string} transferCompanyId - ID c·ªßa c√¥ng ty v·∫≠n chuy·ªÉn.
 * @body {number} quantity - S·ªë l∆∞·ª£ng thu·ªëc c·∫ßn chuy·ªÉn.
 * @body {string} token - Token x√°c th·ª±c c·ªßa ManufacturerMSP, StorageAMSP ho·∫∑c StorageBMSP.
 */
app.post('/api/transferMedicine', async (req, res) => {
    const { parentLogId, fromId, toId, transferCompanyId, quantity, token } = req.body;
    if (!parentLogId || !fromId || !toId || !transferCompanyId || !quantity) {
        return res.status(400).json({ error: "Thi·∫øu c√°c tr∆∞·ªùng b·∫Øt bu·ªôc ƒë·ªÉ chuy·ªÉn thu·ªëc." });
    }
    if (!token) {
        return res.status(401).json({ error: "Thi·∫øu token x√°c th·ª±c. Y√™u c·∫ßu token c·ªßa ManufacturerMSP, StorageAMSP ho·∫∑c StorageBMSP." });
    }

    console.log("ƒêang g·ª≠i y√™u c·∫ßu transferMedicine...");
    try {
        const response = await axios.post(`${FABLO_REST_URL}/invoke/channel/transfer`, {
            method: "SupplyChainContract:transferQuantity",
            args: [parentLogId, fromId, toId, transferCompanyId, quantity.toString()]
        }, {
            headers: {
                "Authorization": `Bearer ${AUTH_TOKEN}`, // S·ª≠ d·ª•ng token t·ª´ request body
                "Content-Type": "application/json"
            }
        });
        res.json(response.data);
        console.log("‚úÖ Thu·ªëc ƒë√£ ƒë∆∞·ª£c chuy·ªÉn th√†nh c√¥ng:", response.data);
    } catch (error) {
        console.error("‚ùå L·ªói khi chuy·ªÉn thu·ªëc:", error.response ? error.response.data : error.message);
        res.status(error.response ? error.response.status : 500).json({ 
            error: "Kh√¥ng th·ªÉ chuy·ªÉn thu·ªëc tr√™n s·ªï c√°i.", 
            details: error.response ? error.response.data : error.message 
        });
    }
});

/**
 * API t·∫°o m·ªôt y√™u c·∫ßu thu·ªëc m·ªõi t·ª´ nh√† thu·ªëc.
 * @route POST /api/createPharmacyRequest
 * @body {string} pharmacyId - ID c·ªßa nh√† thu·ªëc g·ª≠i y√™u c·∫ßu.
 * @body {string} distributorId - ID c·ªßa nh√† ph√¢n ph·ªëi m√† y√™u c·∫ßu ƒë∆∞·ª£c g·ª≠i ƒë·∫øn.
 * @body {Array<Object>} items - M·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng ch·ª©a chi ti·∫øt thu·ªëc (medicineId, quantity, OPTIONAL batchId).
 * @body {string} token - Token x√°c th·ª±c c·ªßa PharmacyMSP.
 */
app.post('/api/createPharmacyRequest', async (req, res) => {
    const { pharmacyId, distributorId, items, token } = req.body;
    console.log("D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ frontend cho createPharmacyRequest:", req.body); 

    if (!pharmacyId || !distributorId || !items || !Array.isArray(items) || items.length === 0) {
        return res.status(400).json({ error: "Thi·∫øu c√°c tr∆∞·ªùng b·∫Øt bu·ªôc ho·∫∑c 'items' kh√¥ng h·ª£p l·ªá." });
    }
    if (!token) {
        return res.status(401).json({ error: "Thi·∫øu token x√°c th·ª±c. Y√™u c·∫ßu token c·ªßa PharmacyMSP." });
    }

    try {
        const itemsJsonString = JSON.stringify(items);
        console.log("items ƒë√£ ƒë∆∞·ª£c stringify:", itemsJsonString);

        // Gi·∫£ s·ª≠ Fablo REST API cho Pharmacy c≈©ng ch·∫°y tr√™n c√πng m·ªôt Fablo REST URL
        // N·∫øu Pharmacy c√≥ c·ªïng REST ri√™ng, c·∫ßn c·∫•u h√¨nh th√™m trong config-network.json
        const response = await axios.post(`${FABLO_REST_URL}/invoke/channel/transfer`, {
            method: "SupplyChainContract:createPharmacyRequest",
            args: [pharmacyId, distributorId, itemsJsonString] 
        }, {
            headers: {
                "Authorization": `Bearer ${AUTH_TOKEN}`, 
                "Content-Type": "application/json"
            }
        });
        console.log("‚úÖ Y√™u c·∫ßu nh√† thu·ªëc ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng:", response.data);
        res.json(response.data);
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫°o y√™u c·∫ßu nh√† thu·ªëc:", error.response ? error.response.data : error.message);
        res.status(error.response ? error.response.status : 500).json({ 
            error: "Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá ho·∫∑c l·ªói server khi t·∫°o y√™u c·∫ßu nh√† thu·ªëc.",
            details: error.response ? error.response.data : error.message 
        });
    }
});

/**
 * API ph√™ duy·ªát v√† x·ª≠ l√Ω y√™u c·∫ßu t·ª´ nh√† thu·ªëc.
 * @route POST /api/approvePharmacyRequest
 * @body {string} requestId - ID c·ªßa y√™u c·∫ßu nh√† thu·ªëc c·∫ßn ph√™ duy·ªát.
 * @body {Array<number>} approvedItemIndices - M·∫£ng c√°c ch·ªâ s·ªë c·ªßa c√°c m·ª•c c·∫ßn ƒë∆∞·ª£c ph√™ duy·ªát.
 * @body {string} token - Token x√°c th·ª±c c·ªßa ManufacturerMSP, StorageAMSP ho·∫∑c StorageBMSP.
 */
app.post('/api/approvePharmacyRequest', async (req, res) => {
    const { requestId, approvedItemIndices, token } = req.body;
    console.log("D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ frontend cho approvePharmacyRequest:", req.body);

    if (!requestId || !Array.isArray(approvedItemIndices)) {
        return res.status(400).json({ error: "Thi·∫øu Request ID ho·∫∑c 'approvedItemIndices' kh√¥ng h·ª£p l·ªá." });
    }
    if (!token) {
        return res.status(401).json({ error: "Thi·∫øu token x√°c th·ª±c. Y√™u c·∫ßu token c·ªßa Distributor." });
    }

    try {
        const comfingRequestJsonString = JSON.stringify(approvedItemIndices);
        console.log("approvedItemIndices ƒë√£ ƒë∆∞·ª£c stringify:", comfingRequestJsonString);

        const response = await axios.post(`${FABLO_REST_URL}/invoke/channel/transfer`, {
            method: "SupplyChainContract:approvePharmacyRequest",
            args: [requestId, comfingRequestJsonString]
        }, {
            headers: {
                "Authorization": `Bearer ${AUTH_TOKEN}`, 
                "Content-Type": "application/json"
            }
        });
        console.log("‚úÖ Y√™u c·∫ßu nh√† thu·ªëc ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát th√†nh c√¥ng:", response.data);
        res.json(response.data);
    } catch(error) {
        console.error("‚ùå L·ªói khi ph√™ duy·ªát y√™u c·∫ßu nh√† thu·ªëc:", error.response ? error.response.data : error.message);
        res.status(error.response ? error.response.status : 500).json({ 
            error: "Kh√¥ng th·ªÉ ph√™ duy·ªát y√™u c·∫ßu nh√† thu·ªëc.", 
            details: error.response ? error.response.data : error.message 
        });
    }
});

/**
 * API ghi l·∫°i vi·ªác ti√™u th·ª• (b√°n ra) thu·ªëc t·∫°i m·ªôt ƒë·ªãa ƒëi·ªÉm.
 * @route POST /api/consumeQuantity
 * @body {string} logId - ID log c·ªßa b·∫£n ghi thu·ªëc ƒëang ƒë∆∞·ª£c ti√™u th·ª•.
 * @body {string} locationId - ID c·ªßa th·ª±c th·ªÉ ti√™u th·ª•/b√°n thu·ªëc (v√≠ d·ª•: ID nh√† thu·ªëc).
 * @body {string} consumerId - ID c·ªßa ng∆∞·ªùi ti√™u d√πng (v√≠ d·ª•: ID b·ªánh nh√¢n).
 * @body {number} quantity - S·ªë l∆∞·ª£ng thu·ªëc ƒë√£ ti√™u th·ª•.
 * @body {number} price - Gi√° m√† thu·ªëc ƒë√£ ƒë∆∞·ª£c ti√™u th·ª•/b√°n.
 * @body {string} token - Token x√°c th·ª±c c·ªßa PharmacyMSP, StorageAMSP ho·∫∑c StorageBMSP.
 */
app.post('/api/consumeQuantity', async (req, res) => {
    const { medicineId, locationId, consumerId, quantity, price, token } = req.body;
    if (!medicineId || !locationId || !consumerId || !quantity || !price) {
        return res.status(400).json({ error: "Thi·∫øu c√°c tr∆∞·ªùng b·∫Øt bu·ªôc ƒë·ªÉ ti√™u th·ª• thu·ªëc." });
    }
    if (!token) {
        return res.status(401).json({ error: "Thi·∫øu token x√°c th·ª±c. Y√™u c·∫ßu token c·ªßa PharmacyMSP, StorageAMSP ho·∫∑c StorageBMSP." });
    }

    console.log("ƒêang g·ª≠i y√™u c·∫ßu consumeQuantity...");
    try {
        const response = await axios.post(`${FABLO_REST_URL}/invoke/channel/transfer`, {
            method: "SupplyChainContract:consumeQuantity",
            args: [medicineId, locationId, consumerId, quantity.toString(), price.toString()]
        }, {
            headers: {
                "Authorization": `Bearer ${AUTH_TOKEN}`, // S·ª≠ d·ª•ng token t·ª´ request body
                "Content-Type": "application/json"
            }
        });
        res.json(response.data);
        console.log("‚úÖ Thu·ªëc ƒë√£ ƒë∆∞·ª£c ti√™u th·ª• th√†nh c√¥ng:", response.data);
    } catch (error) {
        console.error("‚ùå L·ªói khi ti√™u th·ª• thu·ªëc:", error.response ? error.response.data : error.message);
        res.status(error.response ? error.response.status : 500).json({ 
            error: "Kh√¥ng th·ªÉ ti√™u th·ª• thu·ªëc tr√™n s·ªï c√°i.", 
            details: error.response ? error.response.data : error.message 
        });
    }
});

/**
 * API truy xu·∫•t m·ªôt b·∫£n ghi thu·ªëc duy nh·∫•t b·∫±ng ID log c·ªßa n√≥ (bao g·ªìm l·ªãch s·ª≠).
 * @route POST /api/getMedicineByLogId
 * @body {string} logId - ID log duy nh·∫•t c·ªßa b·∫£n ghi thu·ªëc.
 * @body {string} token - Token x√°c th·ª±c c·ªßa b·∫•t k·ª≥ MSP n√†o c√≥ quy·ªÅn ƒë·ªçc (ManufacturerMSP, PharmacyMSP, StorageAMSP, StorageBMSP).
 */
app.post('/api/getMedicineByLogId', async (req, res) => {
    const { logId } = req.body;
    console.log("ƒêang nh·∫≠n y√™u c·∫ßu getMedicineByLogId cho logId:", logId);
    if (!logId) {
        return res.status(400).json({ error: "Thi·∫øu logId ƒë·ªÉ truy v·∫•n." });
    }
    try {
        const response = await axios.post(`${FABLO_REST_URL}/invoke/channel/transfer`, {
            method: "SupplyChainContract:getMedicineBylogId",
            args: [logId]
        }, {
            headers: {
                "Authorization": `Bearer ${AUTH_TOKEN}`, 
                "Content-Type": "application/json"
            }
        });
        res.json(response.data);
        console.log("‚úÖ ƒê√£ truy xu·∫•t thu·ªëc theo LogId th√†nh c√¥ng.");
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y thu·ªëc theo LogId:", error.response ? error.response.data : error.message);
        res.status(error.response ? error.response.status : 500).json({ 
            error: "Kh√¥ng th·ªÉ truy xu·∫•t thu·ªëc theo LogId.", 
            details: error.response ? error.response.data : error.message 
        });
    }
});

/**
 * API truy xu·∫•t t·∫•t c·∫£ c√°c b·∫£n ghi thu·ªëc v√† giao d·ªãch t·ª´ s·ªï c√°i.
 * S·ª≠ d·ª•ng AUTH_TOKEN (admin token) ƒë·ªÉ c√≥ quy·ªÅn truy c·∫≠p to√†n b·ªô ledger.
 * @route POST /api/getAllMedicines
 */
app.post('/api/getAllMedicines', async (req, res) => {
    // C√≥ th·ªÉ th√™m ki·ªÉm tra token n·∫øu mu·ªën gi·ªõi h·∫°n quy·ªÅn truy c·∫≠p v√†o API n√†y
    // if (!req.body.token) { return res.status(401).json({ error: "Missing authentication token." }); }

    try {
        const response = await axios.post(`${FABLO_REST_URL}/invoke/channel/transfer`, {
            method: "SupplyChainContract:getAllMedicines",
            args: []
        }, {
            headers: {
                "Authorization": `Bearer ${AUTH_TOKEN}`, // S·ª≠ d·ª•ng token admin
                "Content-Type": "application/json"
            }
        });
        res.json(response.data);
        console.log("‚úÖ ƒê√£ truy xu·∫•t t·∫•t c·∫£ b·∫£n ghi thu·ªëc th√†nh c√¥ng.");
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y t·∫•t c·∫£ thu·ªëc:", error.response ? error.response.data : error.message);
        res.status(error.response ? error.response.status : 500).json({ 
            error: "Kh√¥ng th·ªÉ truy xu·∫•t t·∫•t c·∫£ b·∫£n ghi thu·ªëc.", 
            details: error.response ? error.response.data : error.message 
        });
    }
});


/**
 * API truy xu·∫•t t·∫•t c·∫£ c√°c y√™u c·∫ßu t·ª´ nh√† thu·ªëc (PharmacyRequest).
 * S·ª≠ d·ª•ng AUTH_TOKEN (admin token) ƒë·ªÉ c√≥ quy·ªÅn truy c·∫≠p to√†n b·ªô ledger.
 * @route POST /api/getPharmacyRequests
 */
app.post('/api/getPharmacyRequests', async (req, res) => {
    // C√≥ th·ªÉ th√™m ki·ªÉm tra token n·∫øu mu·ªën gi·ªõi h·∫°n quy·ªÅn truy c·∫≠p v√†o API n√†y
    // if (!req.body.token) { return res.status(401).json({ error: "Missing authentication token." }); }
    
    try {
        const response = await axios.post(`${FABLO_REST_URL}/invoke/channel/transfer`, {
            method: "SupplyChainContract:getPharmacyRequests",
            args: []
        }, {
            headers: {
                "Authorization": `Bearer ${AUTH_TOKEN}`, // S·ª≠ d·ª•ng token admin
                "Content-Type": "application/json"
            }
        });
        res.json(response.data);
        console.log("‚úÖ ƒê√£ truy xu·∫•t t·∫•t c·∫£ y√™u c·∫ßu nh√† thu·ªëc th√†nh c√¥ng.");
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y y√™u c·∫ßu nh√† thu·ªëc:", error.response ? error.response.data : error.message);
        res.status(error.response ? error.response.status : 500).json({ 
            error: "Kh√¥ng th·ªÉ truy xu·∫•t y√™u c·∫ßu nh√† thu·ªëc.", 
            details: error.response ? error.response.data : error.message 
        });
    }
});

/**
 * API truy xu·∫•t t·ªìn kho c·ªßa m·ªôt nh√† thu·ªëc c·ª• th·ªÉ.
 * N√≥ s·∫Ω g·ªçi getAllMedicines t·ª´ smart contract, sau ƒë√≥ l·ªçc ra c√°c giao d·ªãch PharmacyDelivery
 * m√† toId c·ªßa ch√∫ng kh·ªõp v·ªõi pharmacyId ƒë∆∞·ª£c cung c·∫•p.
 * @route POST /api/getPharmacyInventory
 * @body {string} pharmacyId - ID c·ªßa nh√† thu·ªëc c·∫ßn l·∫•y t·ªìn kho (v√≠ d·ª•: "NT0001").
 * @body {string} token - Token x√°c th·ª±c c·ªßa PharmacyMSP ho·∫∑c m·ªôt MSP c√≥ quy·ªÅn ƒë·ªçc.
 */
app.post('/api/getPharmacyInventory', async (req, res) => {
    const { pharmacyId, token } = req.body;
    console.log("ƒêang nh·∫≠n y√™u c·∫ßu getPharmacyInventory cho pharmacyId:", pharmacyId);

    if (!pharmacyId) {
        return res.status(400).json({ error: "Thi·∫øu pharmacyId ƒë·ªÉ truy v·∫•n t·ªìn kho." });
    }
    if (!token) { // Y√™u c·∫ßu token t·ª´ frontend ƒë·ªÉ ki·ªÉm so√°t quy·ªÅn truy c·∫≠p
        return res.status(401).json({ error: "Missing authentication token for pharmacy inventory." });
    }

    try {
        // L·∫•y t·∫•t c·∫£ c√°c b·∫£n ghi t·ª´ smart contract (s·ª≠ d·ª•ng token ƒë∆∞·ª£c cung c·∫•p)
        const response = await axios.post(`${FABLO_REST_URL}/invoke/channel/transfer`, {
            method: "SupplyChainContract:getAllMedicines",
            args: []
        }, {
            headers: {
                "Authorization": `Bearer ${AUTH_TOKEN}`, // S·ª≠ d·ª•ng token t·ª´ request body
                "Content-Type": "application/json"
            }
        });

        // Kh·ªüi t·∫°o bi·∫øn ƒë·ªÉ l∆∞u payload d·ªØ li·ªáu t·ª´ smart contract
        let allMedicinesRaw;

        // ∆Øu ti√™n response.data.result.payload (c·∫•u tr√∫c ph·ªï bi·∫øn cho invoke/query)
        if (response.data && response.data.result && response.data.result.payload) {
            allMedicinesRaw = response.data.result.payload;
            console.log(`[DEBUG] Found payload in response.data.result.payload`);
        } 
        // Sau ƒë√≥ ki·ªÉm tra response.data.response (c·∫•u tr√∫c b·∫°n v·ª´a g·∫∑p)
        else if (response.data && response.data.response) {
            allMedicinesRaw = response.data.response;
            console.log(`[DEBUG] Found payload in response.data.response`);
        }
        // Ti·∫øp theo, ki·ªÉm tra response.data.payload
        else if (response.data && response.data.payload) {
            allMedicinesRaw = response.data.payload;
            console.log(`[DEBUG] Found payload in response.data.payload`);
        }
        // Cu·ªëi c√πng, th·ª≠ response.data tr·ª±c ti·∫øp
        else if (response.data) {
            allMedicinesRaw = response.data;
            console.log(`[DEBUG] Found payload in response.data (direct)`);
        }

        console.log(`[DEBUG] Type of allMedicinesRaw after initial checks: ${typeof allMedicinesRaw}`);
        // Chuy·ªÉn allMedicinesRaw th√†nh chu·ªói ƒë·ªÉ log, tr√°nh [object Object]
        console.log(`[DEBUG] Value of allMedicinesRaw (first 200 chars): ${String(allMedicinesRaw).substring(0, 200)}...`); 

        let allMedicines;
        if (typeof allMedicinesRaw === 'string') {
            try {
                allMedicines = JSON.parse(allMedicinesRaw);
                console.log(`[DEBUG] Type of allMedicines AFTER JSON.parse: ${typeof allMedicines}`);
                console.log(`[DEBUG] Is allMedicines an Array after parse? ${Array.isArray(allMedicines)}`);
            } catch (e) {
                console.error("‚ùå L·ªói ph√¢n t√≠ch JSON t·ª´ getAllMedicines (Payload):", e.message);
                return res.status(500).json({ error: "D·ªØ li·ªáu payload t·ª´ smart contract kh√¥ng h·ª£p l·ªá (kh√¥ng ph·∫£i JSON h·ª£p l·ªá)." });
            }
        } else if (Array.isArray(allMedicinesRaw)) { // Tr∆∞·ªùng h·ª£p axios ƒë√£ t·ª± ƒë·ªông parse th√†nh m·∫£ng
            allMedicines = allMedicinesRaw;
            console.log(`[DEBUG] allMedicinesRaw ƒë√£ l√† m·∫£ng, kh√¥ng c·∫ßn parse l·∫°i.`);
        } else {
            console.error(`[DEBUG] allMedicinesRaw kh√¥ng ph·∫£i chu·ªói c≈©ng kh√¥ng ph·∫£i m·∫£ng: ${typeof allMedicinesRaw}, value: ${JSON.stringify(allMedicinesRaw)}`);
            return res.status(500).json({ error: "D·ªØ li·ªáu t·ªìn kho kh√¥ng ·ªü ƒë·ªãnh d·∫°ng mong mu·ªën (kh√¥ng ph·∫£i chu·ªói JSON ho·∫∑c m·∫£ng)." });
        }

        // Ki·ªÉm tra cu·ªëi c√πng tr∆∞·ªõc khi g·ªçi filter
        if (!Array.isArray(allMedicines)) {
            console.error(`[DEBUG] Final check: allMedicines kh√¥ng ph·∫£i l√† m·∫£ng tr∆∞·ªõc khi g·ªçi filter. Type: ${typeof allMedicines}`);
            return res.status(500).json({ error: "D·ªØ li·ªáu t·ªìn kho kh√¥ng ph·∫£i l√† m·∫£ng, kh√¥ng th·ªÉ l·ªçc." });
        }

        // L·ªçc ra c√°c b·∫£n ghi l√† PharmacyDelivery v√† c√≥ toId kh·ªõp v·ªõi pharmacyId ƒë∆∞·ª£c y√™u c·∫ßu
        const pharmacyInventory = allMedicines.filter(record => {
            return record.action == 'PharmacyDelivery' && record.toId == pharmacyId && record.distributedQuantities > 0;
        });

        // B·∫°n c√≥ th·ªÉ mu·ªën t·ªïng h·ª£p s·ªë l∆∞·ª£ng n·∫øu c√≥ nhi·ªÅu b·∫£n ghi delivery cho c√πng m·ªôt thu·ªëc/batch
        const aggregatedInventory = {};
        console.log("Pharmacy Inventory after initial filter:", pharmacyInventory); // Log chi ti·∫øt h∆°n
        pharmacyInventory.forEach(item => {
            // Thay ƒë·ªïi key ƒë·ªÉ ch·ªâ nh√≥m theo medicineId
            const key = item.medicineId; 
            
            if (!aggregatedInventory[key]) {
                aggregatedInventory[key] = {
                    medicineId: item.medicineId,
                    // B·ªè batchId kh·ªèi c·∫•u tr√∫c t·ªïng h·ª£p n·∫øu b·∫°n ch·ªâ mu·ªën nh√≥m theo medicineId
                    // batchId: item.batchId, // B·ªè d√≤ng n√†y ho·∫∑c gi·ªØ l·∫°i n·∫øu mu·ªën hi·ªÉn th·ªã batchId c·ªßa m·ªôt trong c√°c l√¥
                    quantity: 0,
                    deliveryLogIds: [] 
                };
            }
            aggregatedInventory[key].quantity += item.distributedQuantities;
            aggregatedInventory[key].deliveryLogIds.push(item.txId);
        });

        // Chuy·ªÉn ƒë·ªëi t∆∞·ª£ng t·ªïng h·ª£p th√†nh m·∫£ng
        const finalInventory = Object.values(aggregatedInventory);
        res.json(finalInventory);
        console.log(`‚úÖ ƒê√£ truy xu·∫•t v√† l·ªçc t·ªìn kho cho nh√† thu·ªëc ${pharmacyId} th√†nh c√¥ng.`);
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y t·ªìn kho nh√† thu·ªëc:", error.response ? error.response.data : error.message);
        res.status(error.response ? error.response.status : 500).json({ 
            error: "Kh√¥ng th·ªÉ truy xu·∫•t t·ªìn kho nh√† thu·ªëc.", 
            details: error.response ? error.response.data : error.message 
        });
    }
});


app.post('/api/medicines/by-manufacturer/:manufacturerId', async (req, res) => {
    const { manufacturerId } = req.params;
    console.log("ƒêang nh·∫≠n y√™u c·∫ßu l·∫•y thu·ªëc theo nh√† s·∫£n xu·∫•t:", manufacturerId);

    if (!manufacturerId) {
        return res.status(400).json({ error: "Thi·∫øu manufacturerId ƒë·ªÉ truy v·∫•n." });
    }

    try {
        // G·ªçi smart contract ƒë·ªÉ l·∫•y t·∫•t c·∫£ thu·ªëc
        const response = await axios.post(`${FABLO_REST_URL}/invoke/channel/transfer`, {
            method: "SupplyChainContract:getAllMedicines",
            args: []
        }, {
            headers: {
                "Authorization": `Bearer ${AUTH_TOKEN}`,
                "Content-Type": "application/json"
            }
        });

        // D·ªØ li·ªáu tr·∫£ v·ªÅ c√≥ th·ªÉ n·∫±m trong response.data.response
        const rawData = response.data.response || [];

        // L·ªçc c√°c thu·ªëc c√≥ action === "CREATE" v√† ƒë√∫ng manufacturerId
        const filteredMedicines = rawData.filter(med => {
            return med.action == "CREATE" && med.manufacturerId == manufacturerId;
        });

        console.log(`‚úÖ T√¨m th·∫•y ${filteredMedicines.length} thu·ªëc ƒë∆∞·ª£c t·∫°o b·ªüi NSX ${manufacturerId}.`);
        res.json(filteredMedicines);

    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y thu·ªëc theo nh√† s·∫£n xu·∫•t:", error.response ? error.response.data : error.message);
        res.status(error.response ? error.response.status : 500).json({ 
            error: "Kh√¥ng th·ªÉ truy xu·∫•t thu·ªëc theo nh√† s·∫£n xu·∫•t.", 
            details: error.response ? error.response.data : error.message 
        });
    }
});

/**
 * API l·∫•y l·ªãch s·ª≠ mua h√†ng c·ªßa m·ªôt b·ªánh nh√¢n t·∫°i m·ªôt ho·∫∑c t·∫•t c·∫£ c√°c nh√† thu·ªëc.
 * @route POST /api/getPatientPurchaseHistory
 * @body {string} patientId - ID c·ªßa b·ªánh nh√¢n (consumerId - s·ªë ƒëi·ªán tho·∫°i).
 * @body {string} [pharmacyId] - ID c·ªßa nh√† thu·ªëc ƒë·ªÉ l·ªçc giao d·ªãch (t√πy ch·ªçn).
 * @body {string} token - Token x√°c th·ª±c ƒë·ªÉ g·ªçi smart contract (v√≠ d·ª•: token admin).
 */
app.post('/api/getPatientPurchaseHistory', async (req, res) => {
    const { patientId, pharmacyId } = req.body;
    console.log(`ƒêang nh·∫≠n y√™u c·∫ßu l·∫•y l·ªãch s·ª≠ mua h√†ng cho b·ªánh nh√¢n: ${patientId}${pharmacyId ? ` t·∫°i nh√† thu·ªëc: ${pharmacyId}` : ''}`);

    if (!patientId) {
        return res.status(400).json({ error: "Thi·∫øu patientId ƒë·ªÉ truy v·∫•n." });
    }

    try {
        // L·∫•y th√¥ng tin nh√† thu·ªëc t·ª´ SQL n·∫øu pharmacyId ƒë∆∞·ª£c cung c·∫•p
        let pharmacyInfo = null;
        if (pharmacyId) {
            const pharmacyRes = await axios.post(`http://${ip.host}:${ip.backend}/api/getPharmacy`, { pharmacyId });
            pharmacyInfo = pharmacyRes.data[0]; // L·∫•y b·∫£n ghi ƒë·∫ßu ti√™n n·∫øu c√≥
            if (!pharmacyInfo) {
                console.warn(`Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√† thu·ªëc v·ªõi ID: ${pharmacyId}`);
            }
        }

        // G·ªçi smart contract ƒë·ªÉ l·∫•y t·∫•t c·∫£ c√°c b·∫£n ghi thu·ªëc v√† giao d·ªãch
        const response = await axios.post(`${FABLO_REST_URL}/invoke/channel/transfer`, {
            method: "SupplyChainContract:getAllMedicines",
            args: []
        }, {
            headers: {
                "Authorization": `Bearer ${AUTH_TOKEN}`,
                "Content-Type": "application/json"
            }
        });

        let allMedicinesRaw;
        if (response.data && response.data.result && response.data.result.payload) {
            allMedicinesRaw = response.data.result.payload;
        } else if (response.data && response.data.response) {
            allMedicinesRaw = response.data.response;
        } else if (response.data && response.data.payload) {
            allMedicinesRaw = response.data.payload;
        } else if (response.data) {
            allMedicinesRaw = response.data;
        }

        let allMedicines;
        if (typeof allMedicinesRaw === 'string') {
            try {
                allMedicines = JSON.parse(allMedicinesRaw);
            } catch (e) {
                console.error("‚ùå L·ªói ph√¢n t√≠ch JSON t·ª´ getAllMedicines (Payload):", e.message);
                return res.status(500).json({ error: "D·ªØ li·ªáu payload t·ª´ smart contract kh√¥ng h·ª£p l·ªá (kh√¥ng ph·∫£i JSON h·ª£p l·ªá)." });
            }
        } else if (Array.isArray(allMedicinesRaw)) {
            allMedicines = allMedicinesRaw;
        } else {
            return res.status(500).json({ error: "D·ªØ li·ªáu t·ª´ smart contract kh√¥ng ·ªü ƒë·ªãnh d·∫°ng mong mu·ªën." });
        }

        const purchaseHistory = [];

        // L·ªçc c√°c b·∫£n ghi PharmacyDelivery
        const pharmacyDeliveries = allMedicines.filter(record => {
            const isDelivery = record.action === 'PharmacyDelivery';
            const isToTargetPharmacy = pharmacyId ? (record.toId === pharmacyId) : true; // L·ªçc theo pharmacyId n·∫øu ƒë∆∞·ª£c cung c·∫•p
            return isDelivery && isToTargetPharmacy;
        });

        // Duy·ªát qua c√°c b·∫£n ghi PharmacyDelivery v√† tr√≠ch xu·∫•t c√°c s·ª± ki·ªán CONSUME c·ªßa b·ªánh nh√¢n
        for (const delivery of pharmacyDeliveries) {
            if (Array.isArray(delivery.consumptionDetails)) {
                for (const detail of delivery.consumptionDetails) {
                    if (detail.type === 'CONSUME' && detail.consumerId === patientId) {
                        purchaseHistory.push({
                            medicineId: delivery.medicineId,
                            batchId: delivery.batchId,
                            quantity: detail.quantity,
                            price: detail.price,
                            timestamp: detail.timestamp,
                            locationId: detail.locationId, // Nh√† thu·ªëc n∆°i mua h√†ng
                            txId: delivery.txId // ID giao d·ªãch PharmacyDelivery g·ªëc
                        });
                    }
                }
            }
        }

        console.log(`‚úÖ T√¨m th·∫•y ${purchaseHistory.length} giao d·ªãch mua h√†ng cho b·ªánh nh√¢n ${patientId}${pharmacyId ? ` t·∫°i nh√† thu·ªëc ${pharmacyId}` : ''}.`);
        res.json(purchaseHistory);

    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y l·ªãch s·ª≠ mua h√†ng c·ªßa b·ªánh nh√¢n:", error.response ? error.response.data : error.message);
        res.status(error.response ? error.response.status : 500).json({ 
            error: "Kh√¥ng th·ªÉ truy xu·∫•t l·ªãch s·ª≠ mua h√†ng c·ªßa b·ªánh nh√¢n.", 
            details: error.response ? error.response.data : error.message 
        });
    }
});

// --- C√°c API SQL Server (T∆∞∆°ng t√°c v·ªõi c∆° s·ªü d·ªØ li·ªáu truy·ªÅn th·ªëng) ---

/**
 * API l·∫•y th√¥ng tin thu·ªëc t·ª´ SQL Server.
 * @route GET /api/getThuoc/:maThuoc
 * @param {string} maThuoc - M√£ thu·ªëc c·∫ßn t√¨m.
 */
app.get('/api/getThuoc/:maThuoc', async (req, res) => {
    try {
        const maThuoc = req.params.maThuoc;
        const pool = await conn;
        const result = await pool
            .request()
            .input('maThuoc', sql.VarChar, maThuoc)
            .query('SELECT * FROM THUOC WHERE MaThuoc = @maThuoc');
        res.json(result.recordset);
    } catch (err) {
        console.error('‚ùå SQL error (getThuoc):', err);
        res.status(500).json({ error: 'L·ªói khi truy v·∫•n SQL Server cho thu·ªëc.' });
    }
});

/**
 * API l·∫•y t·∫•t c·∫£ th√¥ng tin thu·ªëc t·ª´ SQL Server.
 * Bao g·ªìm th√¥ng tin t·ª´ b·∫£ng THUOC v√† BQ (b·∫£o qu·∫£n).
 * @route POST /api/getThuoc
 */
app.post('/api/getThuoc', async (req, res) => {
    try {
        const pool = await conn;
        const result = await pool
            .request()
            .query(`
                SELECT *
                FROM THUOC T
                JOIN BQ B ON T.MA_BQ = B.MA_BQ
            `);
        res.json(result.recordset);
    } catch (err) {
        console.error('‚ùå SQL error (getAllThuoc):', err);
        res.status(500).json({ error: 'L·ªói khi truy v·∫•n SQL Server cho t·∫•t c·∫£ thu·ªëc.' });
    }
});

/**
 * API l·∫•y t·∫•t c·∫£ th√¥ng tin Nh√† S·∫£n Xu·∫•t t·ª´ SQL Server.
 * @route GET /api/getNhaSanXuat
 */
app.get('/api/getNhaSanXuat', async (req, res) => {
    try {
        const pool = await conn;
        const result = await pool.request().query('SELECT * FROM NHA_SX');
        res.json(result.recordset);
    } catch (err) {
        console.error('‚ùå SQL error (getNhaSanXuat):', err);
        res.status(500).json({ error: 'L·ªói khi truy v·∫•n SQL Server cho nh√† s·∫£n xu·∫•t.' });
    }
});

/**
 * API l·∫•y t·∫•t c·∫£ th√¥ng tin Nh√† Ph√¢n Ph·ªëi t·ª´ SQL Server.
 * @route GET /api/getNhaPhanPhoi
 */
app.get('/api/getNhaPhanPhoi', async (req, res) => {
    try {
        const pool = await conn;
        const result = await pool.request().query('SELECT * FROM PP');
        res.json(result.recordset);
    } catch (err) {
        console.error('‚ùå SQL error (getNhaPhanPhoi):', err);
        res.status(500).json({ error: 'L·ªói khi truy v·∫•n SQL Server cho nh√† ph√¢n ph·ªëi.' });
    }
});

/**
 * API l·∫•y t·∫•t c·∫£ th√¥ng tin Nh√† Thu·ªëc t·ª´ SQL Server.
 * @route GET /api/getNhaThuoc
 */
app.get('/api/getNhaThuoc', async (req, res) => {
    try {
        const pool = await conn;
        const result = await pool.request().query('SELECT * FROM NHA_THUOC');
        res.json(result.recordset);
    } catch (err) {
        console.error('‚ùå SQL error (getNhaThuoc):', err);
        res.status(500).json({ error: 'L·ªói khi truy v·∫•n SQL Server cho nh√† thu·ªëc.' });
    }
});

/**
 * API l·∫•y t·∫•t c·∫£ th√¥ng tin Kho t·ª´ SQL Server.
 * @route POST /api/getInventory
 */
app.post('/api/getInventory', async (req, res) => {
    try {
        const pool = await conn;
        const result = await pool.query(`SELECT * FROM KHO`);
        res.json(result.recordset); 
    } catch (err) {
        console.error('‚ùå SQL error (getInventory):', err);
        res.status(500).json({ error: 'L·ªói khi truy v·∫•n SQL Server cho kho.' });
    }
});

/**
 * API l·∫•y t·∫•t c·∫£ th√¥ng tin Nh√† Thu·ªëc t·ª´ SQL Server.
 * @route POST /api/getPharmacy
 */
app.get('/api/getBenhNhan', async (req, res) => {
    try {
        const pool = await conn;
        const result = await pool.query(`select * from BENHNHAN`)
        res.json(result.recordset); 
    } catch (err) {
        console.error('‚ùå SQL error (getPharmacy):', err);
        res.status(500).json({ error: 'L·ªói khi truy v·∫•n SQL Server cho nh√† thu·ªëc.' });
    }
});


// L·∫Øng nghe c·ªïng
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
